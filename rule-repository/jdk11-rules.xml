<rules>
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import java.rmi.registry.RegistryHandler;"/>
			<text_pattern value = "import java.sql.Statement;"/>
			<text_pattern value = "import java.rmi.server.LoaderHandler;"/>
			<text_pattern value = "import java.rmi.server.RemoteCall;"/>
			<text_pattern value = "import java.rmi.server.ServerRef;"/>
			<text_pattern value = "import java.rmi.server.Skeleton;"/>
			<text_pattern value = "import javax.security.auth.Policy;"/>
			<text_pattern value = "import java.xml.ws;"/>
			<text_pattern value = "import java.xml.bind;"/>
			<text_pattern value = "import java.activation;"/>
			<text_pattern value = "import java.xml.ws.annotation;"/>
			<text_pattern value = "import java.corba;"/>
			<text_pattern value = "import java.transaction;"/>
			<text_pattern value = "import java.se.ee;"/>
			<text_pattern value = "import sun.locale.formatasdefault;"/>
			<text_pattern value = "import jdk.xml.ws;"/>
			<text_pattern value = "import com.sun.xml.internal.ws.client.ContentNegotiation;"/>
			<text_pattern value = "import com.sun.xml.internal.ws.legacyWebMethod;"/>
			<text_pattern value = "import javax.xml.bind.context.factory;"/>
			<text_pattern value = "import javax.xml.bind.JAXBContext;"/>
			<text_pattern value = "import javax.xml.soap.MetaFactory;"/>
			<text_pattern value = "import javax.xml.ws.spi.Provider;"/>
			<text_pattern value = "import jaxb.fragment;"/>
			<text_pattern value = "import jaxb.noNamespaceSchemaLocation;"/>
			<text_pattern value = "import jaxb.schemaLocation;"/>
			<text_pattern value = "import jaxb.formatted.output;"/>
			<text_pattern value = "import jaxb.encoding;"/>
			<text_pattern value = "import mail.mime.decodetext.strict;"/>
			<text_pattern value = "import mail.mime.encodeeol.strict;"/>
			<text_pattern value = "import mail.mime.foldencodedwords;"/>
			<text_pattern value = "import mail.mime.foldtext;"/>
			<text_pattern value = "import mail.mime.charset;"/>
			<text_pattern value = "import saaj.mime.optimization;"/>
			<text_pattern value = "import saaj.lazy.contentlength;"/>
			<text_pattern value = "import saaj.lazy.contentlength;"/>
			<text_pattern value = "import saaj.lazy.mime.optimization;"/>
			<text_pattern value = "import jdk.xml.bind;"/>
			<text_pattern value = "import com.sun.jarsigner.ContentSigner;"/>
			<text_pattern value = "import java.rmi.server.LogStream;"/>
			<text_pattern value = "import java.rmi.server.Operation;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.AssignmentTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.BinaryTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.BlockTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.BreakTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.CaseTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.CatchTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ClassDeclarationTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ClassExpressionTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.CompilationUnitTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.CompoundAssignmentTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ConditionalExpressionTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ConditionalLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ContinueTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.DebuggerTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.Diagnostic;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.Diagnostic.Kind;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.DiagnosticListener;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.DoWhileLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.EmptyStatementTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ErroneousTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ExportEntryTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ExpressionStatementTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ExpressionTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ForInLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ForLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ForOfLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.FunctionCallTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.FunctionDeclarationTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.FunctionExpressionTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.GotoTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.IdentifierTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.IfTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ImportEntryTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.InstanceOfTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.LabeledStatementTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.LineMap;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.LiteralTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.LoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.MemberSelectTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ModuleTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.NewTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ObjectLiteralTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ParenthesizedTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.Parser;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.PropertyTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.RegExpLiteralTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ReturnTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.SimpleTreeVisitorES5_1;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.SimpleTreeVisitorES6;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.SpreadTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.StatementTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.SwitchTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.TemplateLiteralTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.ThrowTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.Tree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.Tree.Kind;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.TreeVisitor;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.TryTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.UnaryTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.UnknownTreeException;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.VariableTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.WhileLoopTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.WithTree;"/>
			<text_pattern value = "import jdk.nashorn.api.tree.YieldTree;"/>
		</pattern_list>
		<remediation recommendation = "Remove this import" complexity= "1" action = "remove" savings="1"/>
	</rule>

	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotatedType;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.type.Type;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.type.Type;" condition = "import" savings="2"/>
	</rule>

	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotationDesc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.AnnotationMirror;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.AnnotationMirror;" condition = "import" savings="2"/>
	</rule>

	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ExecutableMemberDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.ExecutableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.ExecutableElement;" condition = "import" savings="2"/>
	</rule>

	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.LanguageVersion;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.SourceVersion;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.SourceVersion;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotationDesc.ElementValuePair;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with javax.lang.model.element.AnnotationValue;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.AnnotationValue;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotationTypeDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.TypeElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.TypeElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotationTypeElementDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.ExecutableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.ExecutableElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.AnnotationValue;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.AnnotationValue;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.AnnotationValue;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ClassDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.TypeElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.TypeElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ConstructorDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.ExecutableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.ExecutableElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.Doc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.Element;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.Element;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.DocErrorReporter;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import jdk.javadoc.doclet.Reporter;" complexity= "2" action = "replace" replace_with = "import jdk.javadoc.doclet.Reporter;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.Doclet;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import jdk.javadoc.doclet.Doclet;" complexity= "2" action = "replace" replace_with = "import jdk.javadoc.doclet.Doclet;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.FieldDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.VariableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.VariableElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.MemberDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.Element;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.Element;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.MethodDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.ExecutableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.ExecutableElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.PackageDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.PackageElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.PackageElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.Parameter;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.VariableElement;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.VariableElement;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ParameterizedType;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.type.DeclaredType;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.type.DeclaredType;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ParamTag;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import com.sun.source.doctree.ParamTree;" complexity= "2" action = "replace" replace_with = "import com.sun.source.doctree.ParamTree;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ProgramElementDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.element.Element;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.element.Element;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.RootDoc;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import jdk.javadoc.doclet.DocletEnvironment;" complexity= "2" action = "replace" replace_with = "import jdk.javadoc.doclet.DocletEnvironment;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.SerialFieldTag;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import com.sun.source.doctree.SerialFieldTree;" complexity= "2" action = "replace" replace_with = "import com.sun.source.doctree.SerialFieldTree;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.SourcePosition;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import com.sun.source.util.SourcePositions;" complexity= "2" action = "replace" replace_with = "import com.sun.source.util.SourcePositions;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.Tag;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import com.sun.source.doctree.DocTree;" complexity= "2" action = "replace" replace_with = "import com.sun.source.doctree.DocTree;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.ThrowsTag;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import com.sun.source.doctree.ThrowsTree;" complexity= "2" action = "replace" replace_with = "import com.sun.source.doctree.ThrowsTree;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.Type;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.type.Type;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.type.Type;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.TypeVariable;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.type.TypeVariable;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.type.TypeVariable;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import com.sun.javadoc.WildcardType;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import javax.lang.model.type.WildcardType;" complexity= "2" action = "replace" replace_with = "import javax.lang.model.type.WildcardType;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "import java.rmi.RMISecurityManager;"/>
		</pattern_list>
		<remediation recommendation = "Replace this import with import java.rmi.SecurityManager;" complexity= "2" action = "replace" replace_with = "import java.rmi.SecurityManager;" condition = "import" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "runFinalizersOnExit"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "checkAwtEventQueueAccess"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "checkMemberAccess"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "checkSystemClipboardAccess"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "checkTopLevelWindow"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "Thread.destroy"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
	<rule type="text_finder" category = "Mandatory">
		<pattern_list>
			<text_pattern value = "Thread.stop"/>
		</pattern_list>
		<remediation recommendation = "This method is removed in jdk 11" complexity= "2" action = "information" savings="2"/>
	</rule>
	
</rules>